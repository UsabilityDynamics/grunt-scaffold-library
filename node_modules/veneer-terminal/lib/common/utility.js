/**
 * Helper utility
 *
 * @example
 *
 *    // Select specific methods to load
 *    var my_tools = WebSocketMQ.utility( 'if', 'extend', 'flatten', 'unwatch', 'watch' );
 *
 * @author potanin@UD
 * @date 6/17/13
 */
function Utility() {
  return Object.keys( arguments ) ? require( 'lodash' ).pick.apply( null, [ Utility, Array.prototype.slice.call( arguments ) ] ) : Utility;
}

/**
 * Constructor properties.
 *
 */
Object.defineProperties( module.exports = Utility, {
  colors: {
    value: require( 'colors' ),
    enumerable: false,
    writable: true,
    configurable: true
  },
  findup: {
    value: require( 'findup-sync' ),
    enumerable: false,
    writable: true,
    configurable: true
  },
  toArgs: {
    value: function toArgs( settings ) {

      var args = [];

      require( 'lodash' ).each( settings || {}, function( value, key ) {
        args.push( '--' + key, value );
      });

      return args;

    },
    enumerable: false,
    writable: true,
    configurable: true
  },
  inherits: {
    value: require( 'util' ).inherits,
    enumerable: false,
    writable: true,
    configurable: true
  },
  format: {
    /**
     * Format Arbitrary Things
     *
     * @param type
     * @param data
     * @returns {*}
     */
    value: function format( type, data ) {

      switch (type) {

        case 'version':
          return data;
        break;

      }


    },
    enumerable: true,
    writable: true,
    configurable: true
  },
  basename: {
    value: require( 'path' ).basename,
    enumerable: true,
    writable: true,
    configurable: true
  },
  flatten: {
    value: require( 'lodash' ).flatten,
    enumerable: true,
    writable: true,
    configurable: true
  },
  find: {
    value: require( 'lodash' ).find,
    enumerable: true,
    writable: true,
    configurable: true
  },
  chain: {
    value: require( 'lodash' ).chain,
    enumerable: true,
    writable: true,
    configurable: true
  },
  reject: {
    value: require( 'lodash' ).reject,
    enumerable: true,
    writable: true,
    configurable: true
  },
  merge: {
    value: function merge (a, b){
      if (a && b) {
        for (var key in b) {
          a[key] = b[key];
        }
      }
      return a;
    },
    enumerable: true,
    writable: true,
    configurable: true
  },
  parse_url: {
    value: require( 'url' ).parse,
    enumerable: true,
    writable: true,
    configurable: true
  },
  each: {
    value: require( 'lodash' ).each,
    enumerable: false,
    writable: true,
    configurable: true
  },
  map: {
    value: require( 'lodash' ).map,
    enumerable: false,
    writable: true,
    configurable: true
  },
  extend: {
    value: require( 'lodash' ).extend,
    enumerable: false,
    writable: true,
    configurable: true
  },
  pluck: {
    value: require( 'lodash' ).pluck,
    enumerable: true,
    configurable: true,
    writable: true
  }
});