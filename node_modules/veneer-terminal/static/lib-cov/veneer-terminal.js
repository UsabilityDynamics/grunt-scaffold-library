// instrument by jscoverage, do not modifly this file
(function () {
  var BASE;
  if (typeof global === 'object') {
    BASE = global;
  } else if (typeof window === 'object') {
    BASE = window;
  } else {
    throw new Error('[jscoverage] unknow ENV!');
  }
  if (!BASE._$jscoverage) {
    BASE._$jscoverage = {};
    BASE._$jscoverage_cond = {};
    BASE._$jscoverage_done = function (file, line, express) {
      if (arguments.length === 2) {
        BASE._$jscoverage[file][line] ++;
      } else {
        BASE._$jscoverage_cond[file][line] ++;
        return express;
      }
    };
    BASE._$jscoverage_init = function (base, file, lines) {
      var tmp = [];
      for (var i = 0; i < lines.length; i ++) {
        tmp[lines[i]] = 0;
      }
      base[file] = tmp;
    };
  }
})();
_$jscoverage_init(_$jscoverage, "lib/veneer-terminal.js",[16,19,20,23,26,27,28,31,33,34,36,39,47,56,59,62,76,79,99,109,140,150,154,157,158,159,160,162,170,171,174,178,182,183,186,187,191,205,206,207,208,209,210,212,213,214,215,216,218,234,237,238,241,242,246,247,250,265,266,267,268,269,270,272,288,290,291,292,293,294,297,312,314,315,316,319,320,321,323,324,327,328,329,331,332,333,335,339,340,341,344,360,361,362,363,364,365,367,383,384,385,386,387,388,390,391,392,410,411,412,413,415,416,417,419,420,422,425,426,427,429,430,431,433,434,436,454,455,457,458,459,462,477,478,479,481,484,485,499,500,501,502,503,504,505,506,507,508,509,510,511,513,517,518,519,520,521,522,523,524,526,530,531,532,534,535,536,537,538,539,540,541,543,560,561,562,563,564,565,566,567,569,585,586,587,588,589,590,592,593,594,620,629]);
_$jscoverage_init(_$jscoverage_cond, "lib/veneer-terminal.js",[33,208,214,214,241,246,268,314,323,327,332,339,363,386,415,419,425,430,433,507,520,531,537,563,588]);
_$jscoverage["lib/veneer-terminal.js"].source = ["/**"," * Veneer Terminal"," *"," * @version 1.0.2"," *"," * @class Terminal"," * @author potanin@UD"," * @repository http://github.com/UsabilityDynamics/node-veneer-terminal"," *"," * @constructor"," * @params callback"," */","function Terminal( handler ) {","","  // Inherit Terminal prototype into handler.","  this.utility.inherits( handler, Terminal );","","  // Extend Child Instance with Event Emitter and Settings","  require( 'object-emitter' ).mixin( handler.prototype );","  require( 'object-settings' ).mixin( handler.prototype );","","  // Find Best Package for Terminal settings.","  handler.prototype.set( require( this.utility.findup( 'package.json', { cwd: require( 'path' ).dirname( process.mainModule.filename ) } ) ) );","","  // Configure commander.","  handler.prototype.commander._name = handler.prototype.get( 'name' );","  handler.prototype.commander.version( handler.prototype.get( 'version' ) );","  handler.prototype.commander.usage( handler.prototype.get( 'usage', '[command] [options]' ) );","","  // Extend own context.","  handler.prototype = new handler( null, handler.prototype );","","  if( process.argv.length === 2 ) {","    handler.prototype.commander.outputHelp();","  } else {","    handler.prototype.commander.parse( process.argv );","  }","","  return handler.prototype;","","}","","/**"," * Terminal Instance Properties"," *"," */","Object.defineProperties( Terminal.prototype, {","  log: {","    /**","     * Commander Instance","     * @for Terminal","     */","    value: function() {","","      // Prefix with name of terminal","      arguments[0] = [ this.get( 'name' ), arguments[0] ].join( ': ' );","","      // Output to console.","      console.log.apply( console, arguments );","","      // @chainable.","      return this;","","    },","    enumerable: false,","    configurable: true","  },","  write: {","    /**","     * Console Output","     *","     * @for Terminal","     */","    value: function write( string ) {","","      console.log( string.blue );","","      // @chainable.","      return this;","","    },","    enumerable: false,","    configurable: true","  },","  commander: {","    /**","     * Commander Instance","     * @for Terminal","     */","    value: require( 'commander' ),","    enumerable: false,","    configurable: true","  },","  option: {","    /**","     * Terminal Command","     */","    value: function option( flags, description, fn, defaultValue ) {","      return this.commander.option( flags, description, fn, defaultValue )","    },","    enumerable: true,","    configurable: true","  },","  command: {","    /**","     * Terminal Command","     */","    value: function command( name, desc ) {","      return this.commander.command( name ).description( desc )","    },","    enumerable: true,","    configurable: true","  },","  debug: {","    /**","     * Terminal Debugger","     *","     * @for Terminal","     * @method debug","     *","     * @param callback","     * @returns {Terminal}","     */","    value: require( 'debug' )( 'veneer:terminal' ),","    enumerable: true,","    configurable: true,","    writable: true","  },","  app_path: {","    /**","     * Get Path to Application","     *","     * @todo Fix.","     *","     * @param _package","     * @param targetName","     * @returns {string}","     */","    value: function app_path ( _package, targetName ) {","      return \"/home/\" + this._module.package.targets[targetName].ssh.user + \"/\" + targetName + \"/\" + _package.name;","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  inline_env: {","    value: function inline_env ( it ) {","","      function qescape ( it ) {","        return it.replace( /\\\\/g, \"\\\\\\\\\" ).replace( /\\'/g, \"\\\\'\" ).replace( /\\`/g, \"\\\\`\" );","      }","","      function qqescape ( it ) {","        return it.replace( /\\\\/g, \"\\\\\\\\\" ).replace( /\\\"/g, '\\\\\"' );","      }","","      var k, v, items = [];","      for( k in it ) {","        v = it[k] === null ? \"\" : it[k].toString();","        items.push( k + \"=\\\"\" + qqescape( v ) + \"\\\"\" );","      }","      return items.join( \" \" );","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  sshs: {","    value: function sshs ( conf, cmds ) {","      Terminal.debug( 'Executing SSH command(s).' );","      var exec = require( 'child_process' ).exec;","","      function qescape ( it ) {","        return it.replace( /\\\\/g, \"\\\\\\\\\" ).replace( /\\'/g, \"\\\\'\" ).replace( /\\`/g, \"\\\\`\" );","      }","","      function qqescape ( it ) {","        return it.replace( /\\\\/g, \"\\\\\\\\\" ).replace( /\\\"/g, '\\\\\"' );","      }","","      function ssh ( conf, cmd ) {","        conf.hosts.forEach( function( host ) {","          var args = [","            \"-o\", \"ForwardAgent=yes\", \"-o\", \"StrictHostKeyChecking=no\", \"-p\", conf.port, conf.user + \"@\" + host, \"bash -c '\" + qescape( cmd ) + \"'\"","          ];","          console.log( \"ssh\", args );","          exec( \"ssh\", args );","        } );","      }","","      ssh( conf, cmds.join( \" && \" ) );","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  init: {","    /**","     * Start Terminal","     *","     * @param callback","     * @returns {Terminal}","     */","    value: function init ( optParser, _package ) {","      var argv = this._optParser.demand( 1 ).argv;","      var targetName = argv._[1]","      var targetConf = _package.config.targets[targetName]","      if( !targetConf ) {","        console.error( \"Invalid target:\", targetName );","        process.exit( 1 );","      }","      var destAppPath = this.app_path( _package, targetName );","      var repoUrl = _package.repository.url;","      if( !repoUrl || _package.repository.type !== 'git' ) {","        console.error( \"package.json must have repository of type 'git'\" );","        process.exit( 1 );","      }","      sshs( targetConf.ssh, [","        \"mkdir -p \" + destAppPath, \"git clone \" + repoUrl + \" \" + destAppPath, \"cd \" + destAppPath, \"npm install\"","      ] );","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  start: {","    /**","     * Start Module","     *","     * @param callback","     * @returns {Terminal}","     */","    value: function start ( module, callback ) {","      Terminal.debug( 'Start Module.' );","","      // Veneer Cluster and Service handlers.","      var Cluster = require( 'veneer-cluster' );","      var Service = require( 'veneer-service' );","","      // Start Service","      if( this._package.type === 'service' ) {","        this._instance = Service.start( this._module, this._callback );","      }","","      // Start Module","      if( this._package.type === 'cluster' ) {","        this._instance = Cluster.start( this._module, this._callback );","      }","","      console.log( require( 'util' ).inspect( this._instance, { showHidden: false, colors: true, depth: 2 } ) )","","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  stop: {","    /**","     * Start Terminal","     *","     * @param callback","     * @returns {Terminal}","     */","    value: function stop ( optParser, _package ) {","      var argv = this._optParser.demand( 1 ).argv;","      var targetName = argv._[1]","      var targetConf = _package.config.targets[targetName]","      if( !targetConf ) {","        console.error( \"Invalid target:\", targetName );","        process.exit( 1 );","      }","      sshs( targetConf.ssh, [","        \"cd \" + app_path( _package, targetName ), \"npm stop\"","      ] );","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  list: {","    /**","     * Start Terminal","     *","     * @param callback","     * @returns {Terminal}","     */","    value: function list ( optParser, _package ) {","      Terminal.debug( 'Listing options.' );","","      var name, target;","      for( name in _package.config.targets ) {","        target = _package.config.targets[name];","        console.log( name )","        target.ssh.hosts.forEach( printHost );","      }","      function printHost ( host ) {","        console.log( \"  \" + host );","      }","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  deploy: {","    /**","     * Start Terminal","     *","     * @param callback","     * @returns {Terminal}","     */","    value: function deploy ( optParser, _package ) {","      var argv = this._optParser.demand( 1 ).default( 'branch', null ).default( 'npmforce', null ).argv;","","      if( !this._module.package.targets ) {","        console.error( \"package.json missing 'config.targets' config\" );","        process.exit( 1 );","      }","","      var targetName = argv._[1]","      var targetConf = _package.config.targets[targetName]","      var forceCommand = \"\";","","      if( argv.npmforce ) {","        forceCommand = \" --force\"","      }","","      if( !targetConf ) {","        console.error( \"Invalid target:\", targetName );","        process.exit( 1 );","      }","      var env = this.inline_env( targetConf.env );","      if( argv.branch ) {","        proceed( null, argv.branch );","      } else {","        this.default_branch( proceed );","      }","","      function proceed ( err, branch ) {","        if( err ) {","          console.error( \"Unable to get current branch:\", err.stack );","          return;","        }","","        sshs( targetConf.ssh, [","          \"cd \" + app_path( _package, targetName ), \"git fetch\", \"git checkout origin/\" + branch, \"git submodule update\", \"npm prune\", \"npm install\" + forceCommand, env + \" npm run deploy\" ] );","      }","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  abort: {","    /**","     * Start Terminal","     *","     * @param callback","     * @returns {Terminal}","     */","    value: function abort ( optParser, _package ) {","      var argv = this._optParser.demand( 1 ).argv;","      var targetName = argv._[1]","      var targetConf = _package.config.targets[targetName]","      if( !targetConf ) {","        console.error( \"Invalid target:\", targetName );","        process.exit( 1 );","      }","      sshs( targetConf.ssh, [","        \"cd \" + app_path( _package, targetName ), \"npm run deploy-abort\"","      ] );","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  monitor: {","    /**","     * Start Terminal","     *","     * @param callback","     * @returns {Terminal}","     */","    value: function monitor ( optParser, _package ) {","      var argv = this._optParser.demand( 1 ).argv;","      var targetName = argv._[1]","      var targetConf = _package.config.targets[targetName]","      if( !targetConf ) {","        console.error( \"Invalid target:\", targetName );","        process.exit( 1 );","      }","      _package.config.commands = _package.config.commands || {};","      var tailCmd = _package.config.commands.monitor || \"tail -f *.log\";","      sshs( targetConf.ssh, [","        \"cd \" + app_path( _package, targetName ), tailCmd","      ] );","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  diff: {","    /**","     * Start Terminal","     *","     * @param callback","     * @returns {Terminal}","     */","    value: function diff ( optParser, _package ) {","","      // Private Modules","      var Batch = require( 'batch' );","      var argv = this._optParser.demand( 1 ).default( 'branch', null ).argv;","      var targetName = argv._[1]","      var targetConf = _package.config.targets[targetName]","","      if( !targetConf ) {","        console.error( \"Invalid target:\", targetName );","        process.exit( 1 );","      }","      if( argv.branch ) {","        proceed( null, argv.branch );","      } else {","        this.default_branch( proceed );","      }","      function proceed ( err, branch ) {","        if( err ) {","          console.error( \"unable to get current branch:\", err.stack );","          return;","        }","        this.deploy_diff( _package, targetName, branch, \"%C(yellow)%h%Creset %Cgreen%cd%Creset %Cred%an%Creset %s\", function( err, gitLog ) {","          if( err ) {","            console.error( \"Unable to get diff:\", err.stack );","          } else {","            if( !gitLog.trim() ) {","              console.log( \"No new code to deploy.\" );","            } else {","              console.log( gitLog );","            }","          }","        } );","      }","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  get_usage: {","    /**","     * Start Terminal","     *","     * @param callback","     * @returns {Terminal}","     */","    value: function get_usage () {","      var usage = \"Usage: $0 [command]\\n\\nAvailable commands:\\n\";","      var task;","","      for( var taskName in Terminal.tasks ) {","        task = Terminal.tasks[taskName];","        usage += \"\\n    \" + taskName + \"\\t\" + task.info;","      }","","      return usage;","","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  exec: {","    /**","     * Start Terminal","     *","     * @param callback","     * @returns {Terminal}","     */","    value: function exec ( cmd, args, opts, cb ) {","      args = args || [];","      opts = opts || {};","      cb = cb || function() {","      };","      opts = this.utility.extend( {","        stdio: [process.stdin, process.stdout, process.stderr]","      }, opts );","      var bin = spawn( cmd, args, opts );","      bin.on( 'exit', cb );","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  deploy_diff: {","    /**","     * Start Terminal","     *","     * @param callback","     * @returns {Terminal}","     */","    value: function deploy_diff ( _package, targetName, branch, format, cb ) {","      var exec = require( 'child_process' ).exec;","      var batch = new Batch();","      batch.push( function( cb ) {","        var sshConf = _package.config.targets[targetName].ssh;","        var firstHost = sshConf.hosts[0];","        var destAppPath = app_path( _package, targetName );","        var cmd = \"ssh \" + \"-o ForwardAgent=yes \" + \"-p \" + sshConf.port + \" \" + sshConf.user + \"@\" + firstHost + \" \" + \"'cd \" + destAppPath + \" && git rev-parse HEAD'\";","        exec( cmd, function( err, stdout, stderr ) {","          if( err ) {","            err.stderr = stderr;","            err.stdout = stdout;","            err.cmd = cmd;","            cb( err );","          } else {","            cb( null, stdout.trim() );","          }","        } );","      } );","      batch.push( function( cb ) {","        var cmd = \"git fetch origin\";","        exec( cmd, function( err, stdout, stderr ) {","          if( err ) {","            err.stderr = stderr;","            err.stdout = stdout;","            err.cmd = cmd;","            cb( err );","          } else {","            cb();","          }","        } );","      } );","      batch.end( function( err, results ) {","        if( err ) {","          return cb( err );","        }","        var rev = results[0];","        var cmd = \"git log --pretty=format:\\\"\" + format + \"\\\" \" + rev + \"..origin/\" + branch;","        exec( cmd, function( err, stdout, stderr ) {","          if( err ) {","            err.stderr = stderr;","            err.stdout = stdout;","            err.cmd = cmd;","            cb( err );","          } else {","            cb( null, stdout.trim() );","          }","        } );","      } );","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  default_branch: {","    /**","     * Start Terminal","     *","     * @param callback","     * @returns {Terminal}","     */","    value: function default_branch ( cb ) {","      var exec = require( 'child_process' ).exec;","      var cmd = \"git rev-parse --abbrev-ref HEAD\";","      exec( cmd, function( err, stdout, stderr ) {","        if( err ) {","          err.stderr = stderr;","          err.stdout = stdout;","          err.cmd = cmd;","          cb( err );","        } else {","          cb( null, stdout.trim() );","        }","      } );","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  run_env: {","    /**","     * Start Terminal","     *","     * @param callback","     * @returns {Terminal}","     */","    value: function run_env ( optParser, _package ) {","      var argv = this._optParser.demand( 1 ).argv;","      var targetName = argv._[1];","      var target = _package.config.targets[targetName];","      if( !target ) {","        console.error( \"Invalid target:\", targetName );","        process.exit( 1 );","      }","      var args = argv._.slice( 2 )","      var env = this.utility.extend( this.utility.extend( {}, target.env ), process.env )","      var child = spawn( 'bash', ['-c', args.join( \" \" )], {","        stdio: 'inherit',","        env: env,","      } )","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  utility: {","    /**","     * Terminal Utilities","     *","     * @for Terminal","     */","    value: require( './common/utility' ),","    enumerable: true,","    configurable: true,","    writable: true","  }","});","","/**"," * Export Terminal Class"," *"," */","Object.defineProperties( module.exports = Terminal, {","  create: {","    /**","     * Create Terminal Instance","     *","     * @param callback","     * @returns {Terminal}","     */","    value: function create ( handler ) {","      return new Terminal( handler );","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  tasks: {","    value: {","      list: {","        fn: Terminal.prototype.list,","        info: \"list available deploy targets\"","      },","      init: {","        fn: Terminal.prototype.init,","        info: \"<target> - prepares target to accept deployments\"","      },","      start: {","        fn: Terminal.prototype.start,","        info: \"<target> - starts the remote server\"","      },","      stop: {","        fn: Terminal.prototype.stop,","        info: \"<target> - stops the remote server\"","      },","      deploy: {","        fn: Terminal.prototype.deploy,","        info: \"<target> [--branch branch] [--npmforce] - deploy code\"","      }","    },","    enumerable: true,","    configurable: true,","    writable: true","  }","});",""];
function Terminal(handler) {
    _$jscoverage_done("lib/veneer-terminal.js", 16);
    this.utility.inherits(handler, Terminal);
    _$jscoverage_done("lib/veneer-terminal.js", 19);
    require("object-emitter").mixin(handler.prototype);
    _$jscoverage_done("lib/veneer-terminal.js", 20);
    require("object-settings").mixin(handler.prototype);
    _$jscoverage_done("lib/veneer-terminal.js", 23);
    handler.prototype.set(require(this.utility.findup("package.json", {
        cwd: require("path").dirname(process.mainModule.filename)
    })));
    _$jscoverage_done("lib/veneer-terminal.js", 26);
    handler.prototype.commander._name = handler.prototype.get("name");
    _$jscoverage_done("lib/veneer-terminal.js", 27);
    handler.prototype.commander.version(handler.prototype.get("version"));
    _$jscoverage_done("lib/veneer-terminal.js", 28);
    handler.prototype.commander.usage(handler.prototype.get("usage", "[command] [options]"));
    _$jscoverage_done("lib/veneer-terminal.js", 31);
    handler.prototype = new handler(null, handler.prototype);
    _$jscoverage_done("lib/veneer-terminal.js", 33);
    if (_$jscoverage_done("lib/veneer-terminal.js", 33, process.argv.length === 2)) {
        _$jscoverage_done("lib/veneer-terminal.js", 34);
        handler.prototype.commander.outputHelp();
    } else {
        _$jscoverage_done("lib/veneer-terminal.js", 36);
        handler.prototype.commander.parse(process.argv);
    }
    _$jscoverage_done("lib/veneer-terminal.js", 39);
    return handler.prototype;
}

_$jscoverage_done("lib/veneer-terminal.js", 47);
Object.defineProperties(Terminal.prototype, {
    log: {
        value: function() {
            _$jscoverage_done("lib/veneer-terminal.js", 56);
            arguments[0] = [ this.get("name"), arguments[0] ].join(": ");
            _$jscoverage_done("lib/veneer-terminal.js", 59);
            console.log.apply(console, arguments);
            _$jscoverage_done("lib/veneer-terminal.js", 62);
            return this;
        },
        enumerable: false,
        configurable: true
    },
    write: {
        value: function write(string) {
            _$jscoverage_done("lib/veneer-terminal.js", 76);
            console.log(string.blue);
            _$jscoverage_done("lib/veneer-terminal.js", 79);
            return this;
        },
        enumerable: false,
        configurable: true
    },
    commander: {
        value: require("commander"),
        enumerable: false,
        configurable: true
    },
    option: {
        value: function option(flags, description, fn, defaultValue) {
            _$jscoverage_done("lib/veneer-terminal.js", 99);
            return this.commander.option(flags, description, fn, defaultValue);
        },
        enumerable: true,
        configurable: true
    },
    command: {
        value: function command(name, desc) {
            _$jscoverage_done("lib/veneer-terminal.js", 109);
            return this.commander.command(name).description(desc);
        },
        enumerable: true,
        configurable: true
    },
    debug: {
        value: require("debug")("veneer:terminal"),
        enumerable: true,
        configurable: true,
        writable: true
    },
    app_path: {
        value: function app_path(_package, targetName) {
            _$jscoverage_done("lib/veneer-terminal.js", 140);
            return "/home/" + this._module.package.targets[targetName].ssh.user + "/" + targetName + "/" + _package.name;
        },
        enumerable: true,
        configurable: true,
        writable: true
    },
    inline_env: {
        value: function inline_env(it) {
            function qescape(it) {
                _$jscoverage_done("lib/veneer-terminal.js", 150);
                return it.replace(/\\/g, "\\\\").replace(/\'/g, "\\'").replace(/\`/g, "\\`");
            }
            function qqescape(it) {
                _$jscoverage_done("lib/veneer-terminal.js", 154);
                return it.replace(/\\/g, "\\\\").replace(/\"/g, '\\"');
            }
            _$jscoverage_done("lib/veneer-terminal.js", 157);
            var k, v, items = [];
            _$jscoverage_done("lib/veneer-terminal.js", 158);
            for (k in it) {
                _$jscoverage_done("lib/veneer-terminal.js", 159);
                v = it[k] === null ? "" : it[k].toString();
                _$jscoverage_done("lib/veneer-terminal.js", 160);
                items.push(k + '="' + qqescape(v) + '"');
            }
            _$jscoverage_done("lib/veneer-terminal.js", 162);
            return items.join(" ");
        },
        enumerable: true,
        configurable: true,
        writable: true
    },
    sshs: {
        value: function sshs(conf, cmds) {
            _$jscoverage_done("lib/veneer-terminal.js", 170);
            Terminal.debug("Executing SSH command(s).");
            _$jscoverage_done("lib/veneer-terminal.js", 171);
            var exec = require("child_process").exec;
            function qescape(it) {
                _$jscoverage_done("lib/veneer-terminal.js", 174);
                return it.replace(/\\/g, "\\\\").replace(/\'/g, "\\'").replace(/\`/g, "\\`");
            }
            function qqescape(it) {
                _$jscoverage_done("lib/veneer-terminal.js", 178);
                return it.replace(/\\/g, "\\\\").replace(/\"/g, '\\"');
            }
            function ssh(conf, cmd) {
                _$jscoverage_done("lib/veneer-terminal.js", 182);
                conf.hosts.forEach(function(host) {
                    _$jscoverage_done("lib/veneer-terminal.js", 183);
                    var args = [ "-o", "ForwardAgent=yes", "-o", "StrictHostKeyChecking=no", "-p", conf.port, conf.user + "@" + host, "bash -c '" + qescape(cmd) + "'" ];
                    _$jscoverage_done("lib/veneer-terminal.js", 186);
                    console.log("ssh", args);
                    _$jscoverage_done("lib/veneer-terminal.js", 187);
                    exec("ssh", args);
                });
            }
            _$jscoverage_done("lib/veneer-terminal.js", 191);
            ssh(conf, cmds.join(" && "));
        },
        enumerable: true,
        configurable: true,
        writable: true
    },
    init: {
        value: function init(optParser, _package) {
            _$jscoverage_done("lib/veneer-terminal.js", 205);
            var argv = this._optParser.demand(1).argv;
            _$jscoverage_done("lib/veneer-terminal.js", 206);
            var targetName = argv._[1];
            _$jscoverage_done("lib/veneer-terminal.js", 207);
            var targetConf = _package.config.targets[targetName];
            _$jscoverage_done("lib/veneer-terminal.js", 208);
            if (_$jscoverage_done("lib/veneer-terminal.js", 208, !targetConf)) {
                _$jscoverage_done("lib/veneer-terminal.js", 209);
                console.error("Invalid target:", targetName);
                _$jscoverage_done("lib/veneer-terminal.js", 210);
                process.exit(1);
            }
            _$jscoverage_done("lib/veneer-terminal.js", 212);
            var destAppPath = this.app_path(_package, targetName);
            _$jscoverage_done("lib/veneer-terminal.js", 213);
            var repoUrl = _package.repository.url;
            _$jscoverage_done("lib/veneer-terminal.js", 214);
            if (_$jscoverage_done("lib/veneer-terminal.js", 214, !repoUrl) || _$jscoverage_done("lib/veneer-terminal.js", 214, _package.repository.type !== "git")) {
                _$jscoverage_done("lib/veneer-terminal.js", 215);
                console.error("package.json must have repository of type 'git'");
                _$jscoverage_done("lib/veneer-terminal.js", 216);
                process.exit(1);
            }
            _$jscoverage_done("lib/veneer-terminal.js", 218);
            sshs(targetConf.ssh, [ "mkdir -p " + destAppPath, "git clone " + repoUrl + " " + destAppPath, "cd " + destAppPath, "npm install" ]);
        },
        enumerable: true,
        configurable: true,
        writable: true
    },
    start: {
        value: function start(module, callback) {
            _$jscoverage_done("lib/veneer-terminal.js", 234);
            Terminal.debug("Start Module.");
            _$jscoverage_done("lib/veneer-terminal.js", 237);
            var Cluster = require("veneer-cluster");
            _$jscoverage_done("lib/veneer-terminal.js", 238);
            var Service = require("veneer-service");
            _$jscoverage_done("lib/veneer-terminal.js", 241);
            if (_$jscoverage_done("lib/veneer-terminal.js", 241, this._package.type === "service")) {
                _$jscoverage_done("lib/veneer-terminal.js", 242);
                this._instance = Service.start(this._module, this._callback);
            }
            _$jscoverage_done("lib/veneer-terminal.js", 246);
            if (_$jscoverage_done("lib/veneer-terminal.js", 246, this._package.type === "cluster")) {
                _$jscoverage_done("lib/veneer-terminal.js", 247);
                this._instance = Cluster.start(this._module, this._callback);
            }
            _$jscoverage_done("lib/veneer-terminal.js", 250);
            console.log(require("util").inspect(this._instance, {
                showHidden: false,
                colors: true,
                depth: 2
            }));
        },
        enumerable: true,
        configurable: true,
        writable: true
    },
    stop: {
        value: function stop(optParser, _package) {
            _$jscoverage_done("lib/veneer-terminal.js", 265);
            var argv = this._optParser.demand(1).argv;
            _$jscoverage_done("lib/veneer-terminal.js", 266);
            var targetName = argv._[1];
            _$jscoverage_done("lib/veneer-terminal.js", 267);
            var targetConf = _package.config.targets[targetName];
            _$jscoverage_done("lib/veneer-terminal.js", 268);
            if (_$jscoverage_done("lib/veneer-terminal.js", 268, !targetConf)) {
                _$jscoverage_done("lib/veneer-terminal.js", 269);
                console.error("Invalid target:", targetName);
                _$jscoverage_done("lib/veneer-terminal.js", 270);
                process.exit(1);
            }
            _$jscoverage_done("lib/veneer-terminal.js", 272);
            sshs(targetConf.ssh, [ "cd " + app_path(_package, targetName), "npm stop" ]);
        },
        enumerable: true,
        configurable: true,
        writable: true
    },
    list: {
        value: function list(optParser, _package) {
            _$jscoverage_done("lib/veneer-terminal.js", 288);
            Terminal.debug("Listing options.");
            _$jscoverage_done("lib/veneer-terminal.js", 290);
            var name, target;
            _$jscoverage_done("lib/veneer-terminal.js", 291);
            for (name in _package.config.targets) {
                _$jscoverage_done("lib/veneer-terminal.js", 292);
                target = _package.config.targets[name];
                _$jscoverage_done("lib/veneer-terminal.js", 293);
                console.log(name);
                _$jscoverage_done("lib/veneer-terminal.js", 294);
                target.ssh.hosts.forEach(printHost);
            }
            function printHost(host) {
                _$jscoverage_done("lib/veneer-terminal.js", 297);
                console.log("  " + host);
            }
        },
        enumerable: true,
        configurable: true,
        writable: true
    },
    deploy: {
        value: function deploy(optParser, _package) {
            _$jscoverage_done("lib/veneer-terminal.js", 312);
            var argv = this._optParser.demand(1).default("branch", null).default("npmforce", null).argv;
            _$jscoverage_done("lib/veneer-terminal.js", 314);
            if (_$jscoverage_done("lib/veneer-terminal.js", 314, !this._module.package.targets)) {
                _$jscoverage_done("lib/veneer-terminal.js", 315);
                console.error("package.json missing 'config.targets' config");
                _$jscoverage_done("lib/veneer-terminal.js", 316);
                process.exit(1);
            }
            _$jscoverage_done("lib/veneer-terminal.js", 319);
            var targetName = argv._[1];
            _$jscoverage_done("lib/veneer-terminal.js", 320);
            var targetConf = _package.config.targets[targetName];
            _$jscoverage_done("lib/veneer-terminal.js", 321);
            var forceCommand = "";
            _$jscoverage_done("lib/veneer-terminal.js", 323);
            if (_$jscoverage_done("lib/veneer-terminal.js", 323, argv.npmforce)) {
                _$jscoverage_done("lib/veneer-terminal.js", 324);
                forceCommand = " --force";
            }
            _$jscoverage_done("lib/veneer-terminal.js", 327);
            if (_$jscoverage_done("lib/veneer-terminal.js", 327, !targetConf)) {
                _$jscoverage_done("lib/veneer-terminal.js", 328);
                console.error("Invalid target:", targetName);
                _$jscoverage_done("lib/veneer-terminal.js", 329);
                process.exit(1);
            }
            _$jscoverage_done("lib/veneer-terminal.js", 331);
            var env = this.inline_env(targetConf.env);
            _$jscoverage_done("lib/veneer-terminal.js", 332);
            if (_$jscoverage_done("lib/veneer-terminal.js", 332, argv.branch)) {
                _$jscoverage_done("lib/veneer-terminal.js", 333);
                proceed(null, argv.branch);
            } else {
                _$jscoverage_done("lib/veneer-terminal.js", 335);
                this.default_branch(proceed);
            }
            function proceed(err, branch) {
                _$jscoverage_done("lib/veneer-terminal.js", 339);
                if (_$jscoverage_done("lib/veneer-terminal.js", 339, err)) {
                    _$jscoverage_done("lib/veneer-terminal.js", 340);
                    console.error("Unable to get current branch:", err.stack);
                    _$jscoverage_done("lib/veneer-terminal.js", 341);
                    return;
                }
                _$jscoverage_done("lib/veneer-terminal.js", 344);
                sshs(targetConf.ssh, [ "cd " + app_path(_package, targetName), "git fetch", "git checkout origin/" + branch, "git submodule update", "npm prune", "npm install" + forceCommand, env + " npm run deploy" ]);
            }
        },
        enumerable: true,
        configurable: true,
        writable: true
    },
    abort: {
        value: function abort(optParser, _package) {
            _$jscoverage_done("lib/veneer-terminal.js", 360);
            var argv = this._optParser.demand(1).argv;
            _$jscoverage_done("lib/veneer-terminal.js", 361);
            var targetName = argv._[1];
            _$jscoverage_done("lib/veneer-terminal.js", 362);
            var targetConf = _package.config.targets[targetName];
            _$jscoverage_done("lib/veneer-terminal.js", 363);
            if (_$jscoverage_done("lib/veneer-terminal.js", 363, !targetConf)) {
                _$jscoverage_done("lib/veneer-terminal.js", 364);
                console.error("Invalid target:", targetName);
                _$jscoverage_done("lib/veneer-terminal.js", 365);
                process.exit(1);
            }
            _$jscoverage_done("lib/veneer-terminal.js", 367);
            sshs(targetConf.ssh, [ "cd " + app_path(_package, targetName), "npm run deploy-abort" ]);
        },
        enumerable: true,
        configurable: true,
        writable: true
    },
    monitor: {
        value: function monitor(optParser, _package) {
            _$jscoverage_done("lib/veneer-terminal.js", 383);
            var argv = this._optParser.demand(1).argv;
            _$jscoverage_done("lib/veneer-terminal.js", 384);
            var targetName = argv._[1];
            _$jscoverage_done("lib/veneer-terminal.js", 385);
            var targetConf = _package.config.targets[targetName];
            _$jscoverage_done("lib/veneer-terminal.js", 386);
            if (_$jscoverage_done("lib/veneer-terminal.js", 386, !targetConf)) {
                _$jscoverage_done("lib/veneer-terminal.js", 387);
                console.error("Invalid target:", targetName);
                _$jscoverage_done("lib/veneer-terminal.js", 388);
                process.exit(1);
            }
            _$jscoverage_done("lib/veneer-terminal.js", 390);
            _package.config.commands = _package.config.commands || {};
            _$jscoverage_done("lib/veneer-terminal.js", 391);
            var tailCmd = _package.config.commands.monitor || "tail -f *.log";
            _$jscoverage_done("lib/veneer-terminal.js", 392);
            sshs(targetConf.ssh, [ "cd " + app_path(_package, targetName), tailCmd ]);
        },
        enumerable: true,
        configurable: true,
        writable: true
    },
    diff: {
        value: function diff(optParser, _package) {
            _$jscoverage_done("lib/veneer-terminal.js", 410);
            var Batch = require("batch");
            _$jscoverage_done("lib/veneer-terminal.js", 411);
            var argv = this._optParser.demand(1).default("branch", null).argv;
            _$jscoverage_done("lib/veneer-terminal.js", 412);
            var targetName = argv._[1];
            _$jscoverage_done("lib/veneer-terminal.js", 413);
            var targetConf = _package.config.targets[targetName];
            _$jscoverage_done("lib/veneer-terminal.js", 415);
            if (_$jscoverage_done("lib/veneer-terminal.js", 415, !targetConf)) {
                _$jscoverage_done("lib/veneer-terminal.js", 416);
                console.error("Invalid target:", targetName);
                _$jscoverage_done("lib/veneer-terminal.js", 417);
                process.exit(1);
            }
            _$jscoverage_done("lib/veneer-terminal.js", 419);
            if (_$jscoverage_done("lib/veneer-terminal.js", 419, argv.branch)) {
                _$jscoverage_done("lib/veneer-terminal.js", 420);
                proceed(null, argv.branch);
            } else {
                _$jscoverage_done("lib/veneer-terminal.js", 422);
                this.default_branch(proceed);
            }
            function proceed(err, branch) {
                _$jscoverage_done("lib/veneer-terminal.js", 425);
                if (_$jscoverage_done("lib/veneer-terminal.js", 425, err)) {
                    _$jscoverage_done("lib/veneer-terminal.js", 426);
                    console.error("unable to get current branch:", err.stack);
                    _$jscoverage_done("lib/veneer-terminal.js", 427);
                    return;
                }
                _$jscoverage_done("lib/veneer-terminal.js", 429);
                this.deploy_diff(_package, targetName, branch, "%C(yellow)%h%Creset %Cgreen%cd%Creset %Cred%an%Creset %s", function(err, gitLog) {
                    _$jscoverage_done("lib/veneer-terminal.js", 430);
                    if (_$jscoverage_done("lib/veneer-terminal.js", 430, err)) {
                        _$jscoverage_done("lib/veneer-terminal.js", 431);
                        console.error("Unable to get diff:", err.stack);
                    } else {
                        _$jscoverage_done("lib/veneer-terminal.js", 433);
                        if (_$jscoverage_done("lib/veneer-terminal.js", 433, !gitLog.trim())) {
                            _$jscoverage_done("lib/veneer-terminal.js", 434);
                            console.log("No new code to deploy.");
                        } else {
                            _$jscoverage_done("lib/veneer-terminal.js", 436);
                            console.log(gitLog);
                        }
                    }
                });
            }
        },
        enumerable: true,
        configurable: true,
        writable: true
    },
    get_usage: {
        value: function get_usage() {
            _$jscoverage_done("lib/veneer-terminal.js", 454);
            var usage = "Usage: $0 [command]\n\nAvailable commands:\n";
            _$jscoverage_done("lib/veneer-terminal.js", 455);
            var task;
            _$jscoverage_done("lib/veneer-terminal.js", 457);
            for (var taskName in Terminal.tasks) {
                _$jscoverage_done("lib/veneer-terminal.js", 458);
                task = Terminal.tasks[taskName];
                _$jscoverage_done("lib/veneer-terminal.js", 459);
                usage += "\n    " + taskName + "	" + task.info;
            }
            _$jscoverage_done("lib/veneer-terminal.js", 462);
            return usage;
        },
        enumerable: true,
        configurable: true,
        writable: true
    },
    exec: {
        value: function exec(cmd, args, opts, cb) {
            _$jscoverage_done("lib/veneer-terminal.js", 477);
            args = args || [];
            _$jscoverage_done("lib/veneer-terminal.js", 478);
            opts = opts || {};
            _$jscoverage_done("lib/veneer-terminal.js", 479);
            cb = cb || function() {};
            _$jscoverage_done("lib/veneer-terminal.js", 481);
            opts = this.utility.extend({
                stdio: [ process.stdin, process.stdout, process.stderr ]
            }, opts);
            _$jscoverage_done("lib/veneer-terminal.js", 484);
            var bin = spawn(cmd, args, opts);
            _$jscoverage_done("lib/veneer-terminal.js", 485);
            bin.on("exit", cb);
        },
        enumerable: true,
        configurable: true,
        writable: true
    },
    deploy_diff: {
        value: function deploy_diff(_package, targetName, branch, format, cb) {
            _$jscoverage_done("lib/veneer-terminal.js", 499);
            var exec = require("child_process").exec;
            _$jscoverage_done("lib/veneer-terminal.js", 500);
            var batch = new Batch;
            _$jscoverage_done("lib/veneer-terminal.js", 501);
            batch.push(function(cb) {
                _$jscoverage_done("lib/veneer-terminal.js", 502);
                var sshConf = _package.config.targets[targetName].ssh;
                _$jscoverage_done("lib/veneer-terminal.js", 503);
                var firstHost = sshConf.hosts[0];
                _$jscoverage_done("lib/veneer-terminal.js", 504);
                var destAppPath = app_path(_package, targetName);
                _$jscoverage_done("lib/veneer-terminal.js", 505);
                var cmd = "ssh " + "-o ForwardAgent=yes " + "-p " + sshConf.port + " " + sshConf.user + "@" + firstHost + " " + "'cd " + destAppPath + " && git rev-parse HEAD'";
                _$jscoverage_done("lib/veneer-terminal.js", 506);
                exec(cmd, function(err, stdout, stderr) {
                    _$jscoverage_done("lib/veneer-terminal.js", 507);
                    if (_$jscoverage_done("lib/veneer-terminal.js", 507, err)) {
                        _$jscoverage_done("lib/veneer-terminal.js", 508);
                        err.stderr = stderr;
                        _$jscoverage_done("lib/veneer-terminal.js", 509);
                        err.stdout = stdout;
                        _$jscoverage_done("lib/veneer-terminal.js", 510);
                        err.cmd = cmd;
                        _$jscoverage_done("lib/veneer-terminal.js", 511);
                        cb(err);
                    } else {
                        _$jscoverage_done("lib/veneer-terminal.js", 513);
                        cb(null, stdout.trim());
                    }
                });
            });
            _$jscoverage_done("lib/veneer-terminal.js", 517);
            batch.push(function(cb) {
                _$jscoverage_done("lib/veneer-terminal.js", 518);
                var cmd = "git fetch origin";
                _$jscoverage_done("lib/veneer-terminal.js", 519);
                exec(cmd, function(err, stdout, stderr) {
                    _$jscoverage_done("lib/veneer-terminal.js", 520);
                    if (_$jscoverage_done("lib/veneer-terminal.js", 520, err)) {
                        _$jscoverage_done("lib/veneer-terminal.js", 521);
                        err.stderr = stderr;
                        _$jscoverage_done("lib/veneer-terminal.js", 522);
                        err.stdout = stdout;
                        _$jscoverage_done("lib/veneer-terminal.js", 523);
                        err.cmd = cmd;
                        _$jscoverage_done("lib/veneer-terminal.js", 524);
                        cb(err);
                    } else {
                        _$jscoverage_done("lib/veneer-terminal.js", 526);
                        cb();
                    }
                });
            });
            _$jscoverage_done("lib/veneer-terminal.js", 530);
            batch.end(function(err, results) {
                _$jscoverage_done("lib/veneer-terminal.js", 531);
                if (_$jscoverage_done("lib/veneer-terminal.js", 531, err)) {
                    _$jscoverage_done("lib/veneer-terminal.js", 532);
                    return cb(err);
                }
                _$jscoverage_done("lib/veneer-terminal.js", 534);
                var rev = results[0];
                _$jscoverage_done("lib/veneer-terminal.js", 535);
                var cmd = 'git log --pretty=format:"' + format + '" ' + rev + "..origin/" + branch;
                _$jscoverage_done("lib/veneer-terminal.js", 536);
                exec(cmd, function(err, stdout, stderr) {
                    _$jscoverage_done("lib/veneer-terminal.js", 537);
                    if (_$jscoverage_done("lib/veneer-terminal.js", 537, err)) {
                        _$jscoverage_done("lib/veneer-terminal.js", 538);
                        err.stderr = stderr;
                        _$jscoverage_done("lib/veneer-terminal.js", 539);
                        err.stdout = stdout;
                        _$jscoverage_done("lib/veneer-terminal.js", 540);
                        err.cmd = cmd;
                        _$jscoverage_done("lib/veneer-terminal.js", 541);
                        cb(err);
                    } else {
                        _$jscoverage_done("lib/veneer-terminal.js", 543);
                        cb(null, stdout.trim());
                    }
                });
            });
        },
        enumerable: true,
        configurable: true,
        writable: true
    },
    default_branch: {
        value: function default_branch(cb) {
            _$jscoverage_done("lib/veneer-terminal.js", 560);
            var exec = require("child_process").exec;
            _$jscoverage_done("lib/veneer-terminal.js", 561);
            var cmd = "git rev-parse --abbrev-ref HEAD";
            _$jscoverage_done("lib/veneer-terminal.js", 562);
            exec(cmd, function(err, stdout, stderr) {
                _$jscoverage_done("lib/veneer-terminal.js", 563);
                if (_$jscoverage_done("lib/veneer-terminal.js", 563, err)) {
                    _$jscoverage_done("lib/veneer-terminal.js", 564);
                    err.stderr = stderr;
                    _$jscoverage_done("lib/veneer-terminal.js", 565);
                    err.stdout = stdout;
                    _$jscoverage_done("lib/veneer-terminal.js", 566);
                    err.cmd = cmd;
                    _$jscoverage_done("lib/veneer-terminal.js", 567);
                    cb(err);
                } else {
                    _$jscoverage_done("lib/veneer-terminal.js", 569);
                    cb(null, stdout.trim());
                }
            });
        },
        enumerable: true,
        configurable: true,
        writable: true
    },
    run_env: {
        value: function run_env(optParser, _package) {
            _$jscoverage_done("lib/veneer-terminal.js", 585);
            var argv = this._optParser.demand(1).argv;
            _$jscoverage_done("lib/veneer-terminal.js", 586);
            var targetName = argv._[1];
            _$jscoverage_done("lib/veneer-terminal.js", 587);
            var target = _package.config.targets[targetName];
            _$jscoverage_done("lib/veneer-terminal.js", 588);
            if (_$jscoverage_done("lib/veneer-terminal.js", 588, !target)) {
                _$jscoverage_done("lib/veneer-terminal.js", 589);
                console.error("Invalid target:", targetName);
                _$jscoverage_done("lib/veneer-terminal.js", 590);
                process.exit(1);
            }
            _$jscoverage_done("lib/veneer-terminal.js", 592);
            var args = argv._.slice(2);
            _$jscoverage_done("lib/veneer-terminal.js", 593);
            var env = this.utility.extend(this.utility.extend({}, target.env), process.env);
            _$jscoverage_done("lib/veneer-terminal.js", 594);
            var child = spawn("bash", [ "-c", args.join(" ") ], {
                stdio: "inherit",
                env: env
            });
        },
        enumerable: true,
        configurable: true,
        writable: true
    },
    utility: {
        value: require("./common/utility"),
        enumerable: true,
        configurable: true,
        writable: true
    }
});

_$jscoverage_done("lib/veneer-terminal.js", 620);
Object.defineProperties(module.exports = Terminal, {
    create: {
        value: function create(handler) {
            _$jscoverage_done("lib/veneer-terminal.js", 629);
            return new Terminal(handler);
        },
        enumerable: true,
        configurable: true,
        writable: true
    },
    tasks: {
        value: {
            list: {
                fn: Terminal.prototype.list,
                info: "list available deploy targets"
            },
            init: {
                fn: Terminal.prototype.init,
                info: "<target> - prepares target to accept deployments"
            },
            start: {
                fn: Terminal.prototype.start,
                info: "<target> - starts the remote server"
            },
            stop: {
                fn: Terminal.prototype.stop,
                info: "<target> - stops the remote server"
            },
            deploy: {
                fn: Terminal.prototype.deploy,
                info: "<target> [--branch branch] [--npmforce] - deploy code"
            }
        },
        enumerable: true,
        configurable: true,
        writable: true
    }
});