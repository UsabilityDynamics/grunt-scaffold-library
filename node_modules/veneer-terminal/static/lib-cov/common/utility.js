// instrument by jscoverage, do not modifly this file
(function () {
  var BASE;
  if (typeof global === 'object') {
    BASE = global;
  } else if (typeof window === 'object') {
    BASE = window;
  } else {
    throw new Error('[jscoverage] unknow ENV!');
  }
  if (!BASE._$jscoverage) {
    BASE._$jscoverage = {};
    BASE._$jscoverage_cond = {};
    BASE._$jscoverage_done = function (file, line, express) {
      if (arguments.length === 2) {
        BASE._$jscoverage[file][line] ++;
      } else {
        BASE._$jscoverage_cond[file][line] ++;
        return express;
      }
    };
    BASE._$jscoverage_init = function (base, file, lines) {
      var tmp = [];
      for (var i = 0; i < lines.length; i ++) {
        tmp[lines[i]] = 0;
      }
      base[file] = tmp;
    };
  }
})();
_$jscoverage_init(_$jscoverage, "lib/common/utility.js",[13,20,36,38,39,42,65,68,69,111,112,113,116]);
_$jscoverage_init(_$jscoverage_cond, "lib/common/utility.js",[111,111]);
_$jscoverage["lib/common/utility.js"].source = ["/**"," * Helper utility"," *"," * @example"," *"," *    // Select specific methods to load"," *    var my_tools = WebSocketMQ.utility( 'if', 'extend', 'flatten', 'unwatch', 'watch' );"," *"," * @author potanin@UD"," * @date 6/17/13"," */","function Utility() {","  return Object.keys( arguments ) ? require( 'lodash' ).pick.apply( null, [ Utility, Array.prototype.slice.call( arguments ) ] ) : Utility;","}","","/**"," * Constructor properties."," *"," */","Object.defineProperties( module.exports = Utility, {","  colors: {","    value: require( 'colors' ),","    enumerable: false,","    writable: true,","    configurable: true","  },","  findup: {","    value: require( 'findup-sync' ),","    enumerable: false,","    writable: true,","    configurable: true","  },","  toArgs: {","    value: function toArgs( settings ) {","","      var args = [];","","      require( 'lodash' ).each( settings || {}, function( value, key ) {","        args.push( '--' + key, value );","      });","","      return args;","","    },","    enumerable: false,","    writable: true,","    configurable: true","  },","  inherits: {","    value: require( 'util' ).inherits,","    enumerable: false,","    writable: true,","    configurable: true","  },","  format: {","    /**","     * Format Arbitrary Things","     *","     * @param type","     * @param data","     * @returns {*}","     */","    value: function format( type, data ) {","","      switch (type) {","","        case 'version':","          return data;","        break;","","      }","","","    },","    enumerable: true,","    writable: true,","    configurable: true","  },","  basename: {","    value: require( 'path' ).basename,","    enumerable: true,","    writable: true,","    configurable: true","  },","  flatten: {","    value: require( 'lodash' ).flatten,","    enumerable: true,","    writable: true,","    configurable: true","  },","  find: {","    value: require( 'lodash' ).find,","    enumerable: true,","    writable: true,","    configurable: true","  },","  chain: {","    value: require( 'lodash' ).chain,","    enumerable: true,","    writable: true,","    configurable: true","  },","  reject: {","    value: require( 'lodash' ).reject,","    enumerable: true,","    writable: true,","    configurable: true","  },","  merge: {","    value: function merge (a, b){","      if (a && b) {","        for (var key in b) {","          a[key] = b[key];","        }","      }","      return a;","    },","    enumerable: true,","    writable: true,","    configurable: true","  },","  parse_url: {","    value: require( 'url' ).parse,","    enumerable: true,","    writable: true,","    configurable: true","  },","  each: {","    value: require( 'lodash' ).each,","    enumerable: false,","    writable: true,","    configurable: true","  },","  map: {","    value: require( 'lodash' ).map,","    enumerable: false,","    writable: true,","    configurable: true","  },","  extend: {","    value: require( 'lodash' ).extend,","    enumerable: false,","    writable: true,","    configurable: true","  },","  pluck: {","    value: require( 'lodash' ).pluck,","    enumerable: true,","    configurable: true,","    writable: true","  }","});"];
function Utility() {
    _$jscoverage_done("lib/common/utility.js", 13);
    return Object.keys(arguments) ? require("lodash").pick.apply(null, [ Utility, Array.prototype.slice.call(arguments) ]) : Utility;
}

_$jscoverage_done("lib/common/utility.js", 20);
Object.defineProperties(module.exports = Utility, {
    colors: {
        value: require("colors"),
        enumerable: false,
        writable: true,
        configurable: true
    },
    findup: {
        value: require("findup-sync"),
        enumerable: false,
        writable: true,
        configurable: true
    },
    toArgs: {
        value: function toArgs(settings) {
            _$jscoverage_done("lib/common/utility.js", 36);
            var args = [];
            _$jscoverage_done("lib/common/utility.js", 38);
            require("lodash").each(settings || {}, function(value, key) {
                _$jscoverage_done("lib/common/utility.js", 39);
                args.push("--" + key, value);
            });
            _$jscoverage_done("lib/common/utility.js", 42);
            return args;
        },
        enumerable: false,
        writable: true,
        configurable: true
    },
    inherits: {
        value: require("util").inherits,
        enumerable: false,
        writable: true,
        configurable: true
    },
    format: {
        value: function format(type, data) {
            _$jscoverage_done("lib/common/utility.js", 65);
            switch (type) {
              case "version":
                _$jscoverage_done("lib/common/utility.js", 68);
                return data;
                _$jscoverage_done("lib/common/utility.js", 69);
                break;
            }
        },
        enumerable: true,
        writable: true,
        configurable: true
    },
    basename: {
        value: require("path").basename,
        enumerable: true,
        writable: true,
        configurable: true
    },
    flatten: {
        value: require("lodash").flatten,
        enumerable: true,
        writable: true,
        configurable: true
    },
    find: {
        value: require("lodash").find,
        enumerable: true,
        writable: true,
        configurable: true
    },
    chain: {
        value: require("lodash").chain,
        enumerable: true,
        writable: true,
        configurable: true
    },
    reject: {
        value: require("lodash").reject,
        enumerable: true,
        writable: true,
        configurable: true
    },
    merge: {
        value: function merge(a, b) {
            _$jscoverage_done("lib/common/utility.js", 111);
            if (_$jscoverage_done("lib/common/utility.js", 111, a) && _$jscoverage_done("lib/common/utility.js", 111, b)) {
                _$jscoverage_done("lib/common/utility.js", 112);
                for (var key in b) {
                    _$jscoverage_done("lib/common/utility.js", 113);
                    a[key] = b[key];
                }
            }
            _$jscoverage_done("lib/common/utility.js", 116);
            return a;
        },
        enumerable: true,
        writable: true,
        configurable: true
    },
    parse_url: {
        value: require("url").parse,
        enumerable: true,
        writable: true,
        configurable: true
    },
    each: {
        value: require("lodash").each,
        enumerable: false,
        writable: true,
        configurable: true
    },
    map: {
        value: require("lodash").map,
        enumerable: false,
        writable: true,
        configurable: true
    },
    extend: {
        value: require("lodash").extend,
        enumerable: false,
        writable: true,
        configurable: true
    },
    pluck: {
        value: require("lodash").pluck,
        enumerable: true,
        configurable: true,
        writable: true
    }
});